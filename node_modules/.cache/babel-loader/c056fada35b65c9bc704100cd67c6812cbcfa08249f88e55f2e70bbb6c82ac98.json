{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Carla\\\\Desktop\\\\New folder - Copy\\\\my-react-app\\\\src\\\\components\\\\Crash.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import \"../css/Crash.css\";\n\n// const Crash = () => {\n//   const [currentBet, setCurrentBet] = useState(0);\n//   const [gameState, setGameState] = useState(\"waiting\"); // \"waiting\", \"playing\", \"crashed\"\n//   const [crashMultiplier, setCrashMultiplier] = useState(0);\n\n//   const handleBetChange = (event) => {\n//     setCurrentBet(parseInt(event.target.value));\n//   };\n\n//   const startGame = () => {\n//     setGameState(\"playing\");\n//     const randomMultiplier = Math.floor(Math.random() * 500) / 100 + 1;\n//     setCrashMultiplier(randomMultiplier);\n//     setTimeout(() => {\n//       setGameState(\"crashed\");\n//     }, 3000);\n//   };\n\n//   const resetGame = () => {\n//     setCurrentBet(0);\n//     setGameState(\"waiting\");\n//     setCrashMultiplier(0);\n//   };\n\n//   return (\n//     <div className=\"crash-container\">\n//       <h1 className=\"crash-title\">Crash</h1>\n//       <div className=\"crash-info\">\n//         <p>Current bet: {currentBet} bits</p>\n//         {gameState === \"waiting\" ? (\n//           <button className=\"crash-button\" onClick={startGame}>\n//             Start game\n//           </button>\n//         ) : (\n//           <p>Game state: {gameState}</p>\n//         )}\n//         {gameState === \"crashed\" && (\n//           <div>\n//             <p>Crash multiplier: {crashMultiplier.toFixed(2)}</p>\n//             <p>Win: {currentBet * crashMultiplier} bits</p>\n//             <button className=\"crash-button\" onClick={resetGame}>\n//               Play again\n//             </button>\n//           </div>\n//         )}\n//         {gameState === \"playing\" && (\n//           <div>\n//             <p>Multiplier: {crashMultiplier.toFixed(2)}</p>\n//             <button className=\"crash-button\" onClick={() => setGameState(\"crashed\")}>\n//               Cash out\n//             </button>\n//           </div>\n//         )}\n//       </div>\n//       <div className=\"crash-bets\">\n//         <button className=\"crash-bet\" onClick={() => setCurrentBet(currentBet + 10)}>\n//           +10\n//         </button>\n//         <button className=\"crash-bet\" onClick={() => setCurrentBet(currentBet + 100)}>\n//           +100\n//         </button>\n//         <button className=\"crash-bet\" onClick={() => setCurrentBet(currentBet + 1000)}>\n//           +1000\n//         </button>\n//         <button className=\"crash-bet\" onClick={() => setCurrentBet(currentBet + 10000)}>\n//           +10000\n//         </button>\n//         <button className=\"crash-bet\" onClick={() => setCurrentBet(0)}>\n//           Clear\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Crash;\nimport React, { useState, useEffect } from \"react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CrashGame() {\n  _s();\n  const [data, setData] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const updateData = () => {\n    setData(prevData => {\n      const newData = [...prevData];\n      const lastPoint = newData[newData.length - 1] || {\n        x: 0,\n        y: 1\n      };\n      const nextPoint = {\n        x: lastPoint.x + 1,\n        y: lastPoint.y * (1 + Math.random() * 0.02) // Aici puteți ajusta coeficientul de creștere\n      };\n\n      newData.push(nextPoint);\n      return newData;\n    });\n  };\n  const startGame = () => {\n    setData([{\n      x: 0,\n      y: 1\n    }]);\n    setIsRunning(true);\n  };\n  useEffect(() => {\n    if (isRunning) {\n      const interval = setInterval(() => {\n        updateData();\n      }, 100); // Aici puteți ajusta viteza de actualizare a graficului (în milisecunde)\n      return () => clearInterval(interval);\n    }\n  }, [isRunning]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startGame,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: data,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"y\",\n          stroke: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(CrashGame, \"WwHxzI4SkHE/oJ167jvfcwIlFXo=\");\n_c = CrashGame;\nexport default CrashGame;\nvar _c;\n$RefreshReg$(_c, \"CrashGame\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","jsxDEV","_jsxDEV","CrashGame","_s","data","setData","isRunning","setIsRunning","updateData","prevData","newData","lastPoint","length","x","y","nextPoint","Math","random","push","startGame","interval","setInterval","clearInterval","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","width","height","strokeDasharray","dataKey","type","stroke","_c","$RefreshReg$"],"sources":["C:/Users/Carla/Desktop/New folder - Copy/my-react-app/src/components/Crash.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import \"../css/Crash.css\";\r\n\r\n// const Crash = () => {\r\n//   const [currentBet, setCurrentBet] = useState(0);\r\n//   const [gameState, setGameState] = useState(\"waiting\"); // \"waiting\", \"playing\", \"crashed\"\r\n//   const [crashMultiplier, setCrashMultiplier] = useState(0);\r\n\r\n//   const handleBetChange = (event) => {\r\n//     setCurrentBet(parseInt(event.target.value));\r\n//   };\r\n\r\n//   const startGame = () => {\r\n//     setGameState(\"playing\");\r\n//     const randomMultiplier = Math.floor(Math.random() * 500) / 100 + 1;\r\n//     setCrashMultiplier(randomMultiplier);\r\n//     setTimeout(() => {\r\n//       setGameState(\"crashed\");\r\n//     }, 3000);\r\n//   };\r\n\r\n//   const resetGame = () => {\r\n//     setCurrentBet(0);\r\n//     setGameState(\"waiting\");\r\n//     setCrashMultiplier(0);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"crash-container\">\r\n//       <h1 className=\"crash-title\">Crash</h1>\r\n//       <div className=\"crash-info\">\r\n//         <p>Current bet: {currentBet} bits</p>\r\n//         {gameState === \"waiting\" ? (\r\n//           <button className=\"crash-button\" onClick={startGame}>\r\n//             Start game\r\n//           </button>\r\n//         ) : (\r\n//           <p>Game state: {gameState}</p>\r\n//         )}\r\n//         {gameState === \"crashed\" && (\r\n//           <div>\r\n//             <p>Crash multiplier: {crashMultiplier.toFixed(2)}</p>\r\n//             <p>Win: {currentBet * crashMultiplier} bits</p>\r\n//             <button className=\"crash-button\" onClick={resetGame}>\r\n//               Play again\r\n//             </button>\r\n//           </div>\r\n//         )}\r\n//         {gameState === \"playing\" && (\r\n//           <div>\r\n//             <p>Multiplier: {crashMultiplier.toFixed(2)}</p>\r\n//             <button className=\"crash-button\" onClick={() => setGameState(\"crashed\")}>\r\n//               Cash out\r\n//             </button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//       <div className=\"crash-bets\">\r\n//         <button className=\"crash-bet\" onClick={() => setCurrentBet(currentBet + 10)}>\r\n//           +10\r\n//         </button>\r\n//         <button className=\"crash-bet\" onClick={() => setCurrentBet(currentBet + 100)}>\r\n//           +100\r\n//         </button>\r\n//         <button className=\"crash-bet\" onClick={() => setCurrentBet(currentBet + 1000)}>\r\n//           +1000\r\n//         </button>\r\n//         <button className=\"crash-bet\" onClick={() => setCurrentBet(currentBet + 10000)}>\r\n//           +10000\r\n//         </button>\r\n//         <button className=\"crash-bet\" onClick={() => setCurrentBet(0)}>\r\n//           Clear\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Crash;\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \"recharts\";\r\n\r\nfunction CrashGame() {\r\n  const [data, setData] = useState([]);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n\r\n  const updateData = () => {\r\n    setData((prevData) => {\r\n      const newData = [...prevData];\r\n      const lastPoint = newData[newData.length - 1] || { x: 0, y: 1 };\r\n      const nextPoint = {\r\n        x: lastPoint.x + 1,\r\n        y: lastPoint.y * (1 + Math.random() * 0.02), // Aici puteți ajusta coeficientul de creștere\r\n      };\r\n      newData.push(nextPoint);\r\n      return newData;\r\n    });\r\n  };\r\n\r\n  const startGame = () => {\r\n    setData([{ x: 0, y: 1 }]);\r\n    setIsRunning(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      const interval = setInterval(() => {\r\n        updateData();\r\n      }, 100); // Aici puteți ajusta viteza de actualizare a graficului (în milisecunde)\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [isRunning]);\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={startGame}>Start</button>\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <LineChart data={data}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"x\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Line type=\"monotone\" dataKey=\"y\" stroke=\"#8884d8\" />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CrashGame;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}